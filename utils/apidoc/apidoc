#!/bin/bash

# This generates the reference documentation for the core libraries that come
# with dartdoc. It is built on top of dartdoc, which is a general-purpose
# library for generating docs from any Dart code. This library extends that to
# include additional information and styling specific to our corelib.
#
# Usage:
#
# $ ./apidoc
#
# Pretty simple. :)

# TODO(rnystrom): This script is more or less a copy of the one in dartdoc but
# tweaked to output stuff to here instead of inside dartdoc/docs. That's pretty
# gross. Ideally, we'd write the whole thing in Dart an ditch the shell
# but right now we can't even copy binary files using Dart.

# Run from apidoc directory to get correct relative paths.
pushd `dirname "$0"` >>/dev/null

compileToJs() {
  if [ "../dartdoc/$1.dart" -nt "../dartdoc/static/$1.js" ]
    then
    ../../frog/minfrog --libdir=../../frog/lib \
      --out=../dartdoc/static/$1.js --compile-only ../dartdoc/$1.dart
    echo "Compiled $1.dart."
  fi
}

# Generate the client-side .js files if needed.
compileToJs "client-static"
compileToJs "client-live-nav"

# Clean the output directory.
if [ -d "docs" ]; then
    rm -r docs
fi
mkdir docs

# Bundle up the IO libraries so dartdoc can find them.
# TODO(rnystrom): Having to do this is gross. Ideally apidoc should walk the
# sources under runtime/bin/ directly instead of relying on this.
grep "'*.dart'" ../../runtime/bin/io_sources.gypi | sed s/\',//g | \
    sed s,\',../../runtime/bin/,g | xargs cat > io_libs.dart

# Copy the static files over.
cp ../dartdoc/static/* docs
# Overlay any apidoc-specific ones.
cp static/* docs

# Ditch the first arg so we can pass any extra arguments to dartdoc.
shift

# Generate the user's docs.
../../frog/minfrog --libdir=../../frog/lib ../apidoc/apidoc.dart

popd >>/dev/null